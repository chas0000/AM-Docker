name: Build and Publish Docker Image

#on:
#  push:
#    branches:
#    - main

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      artifact-path: build
    steps:
    - name: Setup tmate session
      uses: mxschmitt/action-tmate@v3 

    - name: Checkout code
      uses: actions/checkout@v2

    - name: git_AppleMusicDecrypt
      run: |
        echo "当前工作目录: $(pwd)"
        #apt update&&apt install git wget tar golang -y
        pip install pyinstaller
        git clone https://github.com/WorldObservationLog/AppleMusicDecrypt.git
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH  
        
        cd AppleMusicDecrypt
        poetry add --group dev pyinstaller
        poetry install
        poetry run pyinstaller -F -n AMDecrypt main.py
        poetry run pyinstaller -F -n login ./tool/login.py
        poetry run pyinstaller -F -n logout ./tool/logout.py
        echo "当前工作目录: $(pwd)"
        mv AMDecrypt ${GITHUB_WORKSPACE}
        mv login ${GITHUB_WORKSPACE}
        mv logout ${GITHUB_WORKSPACE}
        mv config.example.toml ${GITHUB_WORKSPACE}
        ls -l ${GITHUB_WORKSPACE}


    - name: git_wrapper-manager
      run: |
        echo "当前工作目录: $(pwd)"
        apt update&&apt install golang -y
        git clone https://github.com/WorldObservationLog/wrapper-manager.git
        cd wrapper-manager
        GOOS=linux GOARCH=amd64 go build -o wm
        #GOOS=linux GOARCH=amd64 go build -o wm
        mv wm ${GITHUB_WORKSPACE} 
        ls -l ${GITHUB_WORKSPACE}/

    - name: git_MP4box
      run: |
        apt update && apt install build-essential pkg-config g++ git cmake yasm zlib1g-dev -y
        git clone https://github.com/gpac/gpac.git gpac_public
        cd gpac_public
        ./configure --static-bin
        make
        ls -l ./bin/gcc
        mv ./bin/gcc/MP4Box ${GITHUB_WORKSPACE}
        ls -l ${GITHUB_WORKSPACE}

    - name: git_mp4edit
      run: |
        apt update && apt install build-essential pkg-config g++ git cmake yasm zlib1g-dev -y
        git clone --depth=1 https://github.com/axiomatic-systems/Bento4.git
        mkdir -p Bento4/cmakebuild
        cd Bento4/cmakebuild || exit 1
        cmake -DCMAKE_BUILD_TYPE=Release ..
        make -j$(nproc)
        $PREFIX make install
        mv ./bin/mp4edit ${GITHUB_WORKSPACE}
        ls -l ${GITHUB_WORKSPACE}



    
    - name: Set up QEMU
      # QEMU 是用于在一种架构上模拟另一种架构的工具  
      # Docker BuildKit 使用 QEMU 来实现跨平台构建  
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # 设置环境变量以包含时间戳  
    - name: Get current date
      run: export TZ='Asia/Shanghai'&& echo "BUILD_DATE=$(date +'%Y%m%d%H%M')" >> $GITHUB_ENV

    # 构建并推送 Docker 镜像  
    - name: Build and push Docker images
      uses: docker/build-push-action@v3
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/wrapper-test:latest
          ${{ secrets.DOCKER_USERNAME }}/wrapper-test:${{ env.BUILD_DATE }}
          ghcr.io/${{ github.repository_owner }}/wrapper-test:latest
          ghcr.io/${{ github.repository_owner }}/wrapper-test:${{ env.BUILD_DATE }}
