name: Build and Publish Docker Image

#on:
#  push:
#    branches:
#    - main

on:
  workflow_dispatch:


jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      artifact-path: build
    steps:
    #- name: Setup tmate session
    #  uses: mxschmitt/action-tmate@v3 

    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Build binary
      run: |
          mkdir -p build-amd64

    - name: git_AppleMusicDecrypt
      run: |
        echo "当前工作目录: $(pwd)"
        #apt update&&apt install git wget tar golang -y
        pip install pyinstaller
        git clone https://github.com/WorldObservationLog/AppleMusicDecrypt.git
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH  

        cd AppleMusicDecrypt
        sed -i 's/^python = "[^"]*"/python = ">=3.11,<3.14"/' pyproject.toml
        poetry add --group dev pyinstaller
        poetry install
        poetry run pyinstaller -F -n AMDecrypt main.py
        poetry run pyinstaller -F -n login $(pwd)/tools/login.py
        poetry run pyinstaller -F -n logout $(pwd)/tools/logout.py
        echo "当前工作目录: $(pwd)"
        mkdir -p ${GITHUB_WORKSPACE}/build
        mv $(pwd)/dist/AMDecrypt ${GITHUB_WORKSPACE}/build-amd64/
        mv $(pwd)/dist/login ${GITHUB_WORKSPACE}/build-amd64/
        mv $(pwd)/dist/logout ${GITHUB_WORKSPACE}/build-amd64/
        mv $(pwd)/config.example.toml ${GITHUB_WORKSPACE}/build-amd64/
        ls -l ${GITHUB_WORKSPACE}/build-amd64

    - name: git_wrapper-manager
      run: |
        echo "当前工作目录: $(pwd)"
        apt update&&apt install golang -y
        git clone https://github.com/WorldObservationLog/wrapper-manager.git
        cd wrapper-manager
        GOOS=linux GOARCH=amd64 go build -o wm
        #GOOS=linux GOARCH=amd64 go build -o wm
        mv wm ${GITHUB_WORKSPACE}/build-amd64/
        ls -l ${GITHUB_WORKSPACE}/build-amd64/

    - name: git_MP4box
      run: |
        apt update && apt install build-essential pkg-config g++ git cmake yasm zlib1g-dev -y
        git clone https://github.com/gpac/gpac.git gpac_public
        cd gpac_public
        ./configure --static-bin
        make
        ls -l ./bin/gcc
        mv ./bin/gcc/MP4Box ${GITHUB_WORKSPACE}/build-amd64/
        ls -l ${GITHUB_WORKSPACE}/build-amd64

    - name: git_mp4edit
      run: |
        apt update && apt install build-essential pkg-config g++ git cmake yasm zlib1g-dev -y
        git clone --depth=1 https://github.com/axiomatic-systems/Bento4.git
        mkdir -p Bento4/cmakebuild
        cd Bento4/cmakebuild || exit 1
        cmake -DCMAKE_BUILD_TYPE=Release ..
        make -j$(nproc)
        #$PREFIX make install
        find . -name mp4edit -exec mv {} ${GITHUB_WORKSPACE}/build-amd64 \;
        ls -l ${GITHUB_WORKSPACE}/build-amd64

    - name: Upload build-amd64 artifacts
      uses: actions/upload-artifact@v4
      with:
        name: am-docker-build-amd64
        path: ${{ github.workspace }}/build-amd64
